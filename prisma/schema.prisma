// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id               Int              @id @default(autoincrement())
  pid              String           @unique @default(uuid())
  userId           String // Supabase UUID
  profileName      String
  jobTitle         String
  name             String
  location         String
  phone            String
  email            String
  websiteText      String
  websiteLink      String
  summary          String
  coverLetter      String
  workEntries      WorkEntry[]
  educationEntries EducationEntry[]
  certifications   Certification[]
  skillCategories  SkillCategory[]
  resumes          Resume[]

  @@index([userId])
}

model WorkEntry {
  id              Int               @id @default(autoincrement())
  pid             String            @unique @default(uuid())
  companyName     String
  companyLocation String
  title           String
  type            JobType
  arrangement     JobArrangement
  startDate       String
  endDate         String?
  enabled         Boolean
  sortOrder       Int
  profileId       Int
  profile         Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  bullets         WorkEntryBullet[]
}

model WorkEntryBullet {
  id          Int       @id @default(autoincrement())
  pid         String    @unique @default(uuid())
  text        String
  enabled     Boolean
  sortOrder   Int
  workEntryId Int
  workEntry   WorkEntry @relation(fields: [workEntryId], references: [id], onDelete: Cascade)
}

model EducationEntry {
  id             Int                    @id @default(autoincrement())
  pid            String                 @unique @default(uuid())
  schoolName     String
  schoolLocation String
  title          String
  graduationDate String
  enabled        Boolean
  sortOrder      Int
  profileId      Int
  profile        Profile                @relation(fields: [profileId], references: [id], onDelete: Cascade)
  bullets        EducationEntryBullet[]
}

model EducationEntryBullet {
  id               Int            @id @default(autoincrement())
  pid              String         @unique @default(uuid())
  text             String
  enabled          Boolean
  sortOrder        Int
  educationEntryId Int
  educationEntry   EducationEntry @relation(fields: [educationEntryId], references: [id], onDelete: Cascade)
}

model Certification {
  id        Int     @id @default(autoincrement())
  pid       String  @unique @default(uuid())
  title     String
  issuer    String
  issueDate String
  enabled   Boolean
  sortOrder Int
  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model SkillCategory {
  id        Int     @id @default(autoincrement())
  pid       String  @unique @default(uuid())
  name      String
  enabled   Boolean
  sortOrder Int
  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  skills    Skill[]
}

model Skill {
  id              Int           @id @default(autoincrement())
  pid             String        @unique @default(uuid())
  text            String
  enabled         Boolean
  sortOrder       Int
  skillCategoryId Int
  skillCategory   SkillCategory @relation(fields: [skillCategoryId], references: [id], onDelete: Cascade)
}

enum JobType {
  fullTime
  partTime
  contract
}

enum JobArrangement {
  onSite
  hybrid
  remote
}

enum JobStatus {
  notApplied
  applied
  appliedWithdrawn
  appliedRejected
  interviewing
  interviewedWithdrawn
  interviewedRejected
  offerReceived
  offerAccepted
}

model Job {
  id                   Int                   @id @default(autoincrement())
  pid                  String                @unique @default(uuid())
  userId               String // Supabase UUID
  title                String
  company              String
  location             String
  type                 JobType?
  arrangement          JobArrangement?
  staffingCompany      String
  description          String
  postedDate           String?
  appliedDate          String?
  status               JobStatus
  notes                String
  postedSalary         String
  desiredSalary        String
  createdAt            DateTime              @default(now())
  links                Link[]
  contacts             Contact[]
  applicationQuestions ApplicationQuestion[]
  resumes              Resume[]

  @@index([userId])
}

model Link {
  id        Int    @id @default(autoincrement())
  pid       String @unique @default(uuid())
  name      String
  url       String
  sortOrder Int
  jobId     Int
  job       Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Contact {
  id           Int    @id @default(autoincrement())
  pid          String @unique @default(uuid())
  name         String
  title        String
  phone        String
  email        String
  company      String
  addressLine1 String
  addressLine2 String
  addressLine3 String
  addressLine4 String
  sortOrder    Int
  jobId        Int
  job          Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model ApplicationQuestion {
  id        Int    @id @default(autoincrement())
  pid       String @unique @default(uuid())
  question  String
  answer    String
  sortOrder Int
  jobId     Int
  job       Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

enum ResumeTemplate {
  template01
  template02
}

model Resume {
  id               Int                    @id @default(autoincrement())
  pid              String                 @unique @default(uuid())
  resumeName       String
  name             String
  location         String
  phone            String
  email            String
  websiteText      String
  websiteLink      String
  summary          String
  coverLetter      String
  allowPageBreaks  Boolean
  template         ResumeTemplate
  jobId            Int
  profileId        Int?
  job              Job                    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  profile          Profile?               @relation(fields: [profileId], references: [id], onDelete: SetNull)
  workEntries      ResumeWorkEntry[]
  educationEntries ResumeEducationEntry[]
  certifications   ResumeCertification[]
  skillCategories  ResumeSkillCategory[]
}

model ResumeWorkEntry {
  id              Int                     @id @default(autoincrement())
  pid             String                  @unique @default(uuid())
  companyName     String
  companyLocation String
  title           String
  type            JobType
  arrangement     JobArrangement
  startDate       String
  endDate         String?
  enabled         Boolean
  sortOrder       Int
  resumeId        Int
  resume          Resume                  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  bullets         ResumeWorkEntryBullet[]
}

model ResumeWorkEntryBullet {
  id          Int             @id @default(autoincrement())
  pid         String          @unique @default(uuid())
  text        String
  enabled     Boolean
  sortOrder   Int
  workEntryId Int
  workEntry   ResumeWorkEntry @relation(fields: [workEntryId], references: [id], onDelete: Cascade)
}

model ResumeEducationEntry {
  id             Int                          @id @default(autoincrement())
  pid            String                       @unique @default(uuid())
  schoolName     String
  schoolLocation String
  title          String
  graduationDate String
  enabled        Boolean
  sortOrder      Int
  resumeId       Int
  resume         Resume                       @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  bullets        ResumeEducationEntryBullet[]
}

model ResumeEducationEntryBullet {
  id               Int                  @id @default(autoincrement())
  pid              String               @unique @default(uuid())
  text             String
  enabled          Boolean
  sortOrder        Int
  educationEntryId Int
  educationEntry   ResumeEducationEntry @relation(fields: [educationEntryId], references: [id], onDelete: Cascade)
}

model ResumeCertification {
  id        Int     @id @default(autoincrement())
  pid       String  @unique @default(uuid())
  title     String
  issuer    String
  issueDate String
  enabled   Boolean
  sortOrder Int
  resumeId  Int
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeSkillCategory {
  id        Int           @id @default(autoincrement())
  pid       String        @unique @default(uuid())
  name      String
  enabled   Boolean
  sortOrder Int
  resumeId  Int
  resume    Resume        @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  skills    ResumeSkill[]
}

model ResumeSkill {
  id              Int                 @id @default(autoincrement())
  pid             String              @unique @default(uuid())
  text            String
  enabled         Boolean
  sortOrder       Int
  skillCategoryId Int
  skillCategory   ResumeSkillCategory @relation(fields: [skillCategoryId], references: [id], onDelete: Cascade)
}

enum ContactMessageType {
  support
  feedback
  featureRequest
  other
}

model ContactMessage {
  id        Int                @id @default(autoincrement())
  userId    String
  email     String
  type      ContactMessageType
  message   String
  createdAt DateTime           @default(now())
}
